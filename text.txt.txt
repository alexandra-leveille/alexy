//////////// gogole maps //////////////////////
- Help on vue-google-maps : https://github.com/xkjyeah/vue-google-maps/issues/181
- vue google maps = https://www.npmjs.com/package/vue2-google-maps
- Api google maps = AIzaSyBkcg913HkHG-5aHYeow1Vj9XWSFBFlF7A
- google map = https://alligator.io/vuejs/vue-google-maps/google map = https://alligator.io/vuejs/vue-google-maps/
- https://www.npmjs.com/package/vue2-google-maps
- https://github.com/GuillaumeLeclerc/vue-google-maps/blob/master/src/components/marker.vue
- https://lodash.com/
- https://serversideup.net/displaying-resources-google-map-vue-js/
- https://forum.vuejs.org/t/update-center-of-a-google-maps/2202
- https://code.tutsplus.com/tutorials/code-a-real-time-nativescript-app-geolocation-and-google-maps--cms-29001
- https://www.google.fr/search?rlz=1C1CHBD_frFR774FR774&ei=mtdyW8zzAeKOlwSbwITACw&q=api+geolocation+CHROME&oq=api+geolocation+CHROME&gs_l=psy-ab.3..0i22i30k1l3.1318.2236.0.2479.7.7.0.0.0.0.84.515.7.7.0....0...1c.1.64.psy-ab..0.7.509...0j0i22i10i30k1j0i8i13i30k1.0.owUW4mmEki8
- https://www.google.fr/search?rlz=1C1CHBD_frFR774FR774&ei=mtdyW8zzAeKOlwSbwITACw&q=api+geolocation+CHROME&oq=api+geolocation+CHROME&gs_l=psy-ab.3..0i22i30k1l3.1318.2236.0.2479.7.7.0.0.0.0.84.515.7.7.0....0...1c.1.64.psy-ab..0.7.509...0j0i22i10i30k1j0i8i13i30k1.0.owUW4mmEki8
- https://github.com/vuejs-templates/webpack/issues/121











just in case docker is doing pulling fs layer
docker-machine restart
docker-machine env
@FOR /f "tokens=*" %i IN ('docker-machine env') DO @%i

okta version 1 = https://developer.okta.com/blog/2018/02/15/build-crud-app-vuejs-node

https://github.com/axios/axios/issues/1529


path to dist = C:\Users\Hi 2017\alexy\dist
this.endpointUrl = 'http://app:5000';
const options: AxiosRequestConfig = {
    method: 'POST',
    url: `${this.endpointUrl}/session/get`,
    data: {
        'client': 'alexa'
    },
    responseType: 'json'
};

axios(options)
    .then((response: AxiosResponse<any>) => {
        console.log(`[SessionService][getSession]: "/session/get" responseData = ${JSON.stringify(response.data)}`);
    })
    .catch(err => {
        console.error(`[SessionService][getSession]: error = ${err}`);
    });

OKTA = https://developer.okta.com/blog/2018/02/15/build-crud-app-vuejs-node



Connect as such = http://192.168.99.100:8087/?pgsql=db&username=alexy&db=alexydb&ns=public&select=users
////////////////////////////////////////////////////////////////////
la arrow function elle est transparente t n'apas de this et prend le this au dessus
elle est

la function classique a un scope et a un this defini


///////////////////////// other synthaxe  ///////////////////////
import axios from 'axios'
const hello = {
  name: 'HelloWorld',
  data () {
    return {
      showingAddModal:false,
      showingEditModal:false,
      showingDeleteModal:false,
      msg: 'Hello guys',
      users:[],
      newUser: {username:'', email:'', mobile:''},
      clickedUser:{}
    }
  },
  mounted:function(){
    console.log("mounted for now");
    this.getUsers();
  },
  methods:{
    getUsers:function(){
      // comment faire la difference entre laction get post or ...
      axios.get('http://localhost:3007/users/').then((response) => {
        console.log(response);
        if (response.data.error){
          console.log('error');
          app.errorMessage = response.data.message;
        } else{
          console.log('no error');
          //console.log('APP USERS',this);
          console.log('APP USERS',this.users);
          this.users = response.data.rows;
          console.log('sucess', response.data.rows);
        }
      })
    }
  }
}
export default hello;


///////////////////////////////////////////////////////////////////////////////
Help for git  http://rogerdudler.github.io/git-guide/
Git hub Guide


/////////////////////////////////////////////////////////////////////////////////


///////////////////////// exemple type of delete users //////////////////////

deleteUser:function(){
  console.log('va delete element');
  //console.log(app.clickedUser);
  console.log('LIGNE 192 this.clickedUser',this.clickedUser);
  //var formData = this.toFormData(this.clickedUser);
  axios.post('http://localhost:3007/users/', this.clickedUser).then((response) => {
    console.log('LIGNE 195 this.clickedUser',this.clickedUser);
    console.log(response);
    this.clickedUser = {};
    if (response.data.error) {
      app.errorMessage = response.data.message;
    } else {
      this.getUsers();
    }
  })
},

/////////////// insert users ///////////////

INSERT INTO users
  (firstname, lastname)
VALUES
  ('David', 'Ostermann'),
  ('Faustino', 'Kialungila'),
  ('Paljor', 'Tsang'),
  ('Gaelle', 'Meric'),
  ('Joffrey', 'Gitau'),
  ('Mehdi', 'Druon'),
  ('Martin', 'Eon'),
  ('Julien', 'Grach');


  /////////////OKAT INFO /////////////


  Username: assdin504@gmail.com
  Temporary password: ANx6g2PJ // Holysmartness407

  year 2000 london
  dev-976497.oktapreview.com
  dev-976497





tutorial git ssh = https://help.github.com/articles/checking-for-existing-ssh-keys/
//////////////////// table command ///////////////////
command:[{ "id": 1, "name": "Alpha", "lieux": "Gare du Nord" },
         { "id": 2, "name": "Beta",  "lieux": "Gare de lâ€™est" },
         { "id": 3, "name": "Ceta",  "lieux": "Gare de Lyon"  },
         { "id": 4, "name": "Delta", "lieux": "Gare Montparnasse"},
         { "id": 9, "name": "Ela",   "lieux": "Gare Auster" },
         { "id": 10, "name": "Feta",  "lieux": "Eiffel"  },
         { "id": 11, "name": "Gamma", "lieux": "Arc de T" },
         { "id": 12, "name": "New", "lieux": "Paris" }]


//////////////////////// users models ////////////////////////////
//jshint esversion:6
const db = require('./db')
const defaultListId = 1;

module.exports = {

  getUsers() {
    return db.query('SELECT * FROM users ORDER BY id');
  },
  createUser({ firstname, lastname }) {
    return db.query(`
    INSERT INTO users(firstname, lastname)
    VALUES ('${firstname}', '${lastname}')`)
  },
  updateUser({ id, firstname, lastname }) {
    return db.query(`
    UPDATE users
    SET firstname='${firstname}', lastname='${lastname}'
    WHERE id=${id}`)
  },
  deleteUser(id) {
    return db.query(`DELETE FROM users WHERE id=${id}`)
  },
  addCard({userId, cardId}) {
    return db.query(`
    INSERT INTO users_cards_lists SET
    user_id=${userId},
    card_id=${cardId},
    list_id=${defaultListId}`)
  },
  setListCard({ userId, cardId, listId }) {
    return db.query(`
    UPDATE users_cards_lists
    SET list_id=${listId}
    WHERE user_id=${userId}
    AND card_id=${cardId}`)
  }

}


//////////////////////////// users models funny ////////////////////////////////
const user = {};

user.getUsers = () =>{
  return db.unwrapQuery('SELECT * FROM users ORDER BY id');
};

user.createUser = ({ firstname, lastname }) => {
  return db.query(`
  INSERT INTO users(firstname, lastname)
  VALUES ('${firstname}', '${lastname}')`)
};

user.updateUser = ({ id, firstname, lastname }) => {
  return db.query(`
  UPDATE users
  SET firstname='${firstname}', lastname='${lastname}'
  WHERE id=${id}`);
};

user.deleteUser = id => {
  return db.query(`DELETE FROM users WHERE id=${id}`)
};

module.exports = user;

////////////////////////////////////////////////////////////////////////////////
parser de tableau
for (var i = 0; i < names.length; i++) {
  console.log(names[i]);
}

for (var i = 0; i < names.length; i++) {
  console.log(names[i].id);
}

for (var i = 0; i < names.length; i++) {
  console.log(names[i].name);
}

for (var i = 0; i < names.length; i++) {
  console.log(names[i].command);
}


var newCommand = []
for (var i = 0; i < names.length; i++) {
  console.log(names[i].command);
  newCommand.push(names[i].command)
}

for (var i = 0; i < newCommand.length; i++) {
  console.log(newCommand[i]);
}
for (var i = 0; i < newCommand.length; i++) {
  console.log(newCommand[i]);
}


ensuite

<td> {{name.command}}
<ul>
<li v-for="command in name.command"> {{ command.name}}</li>
</ul>
 </td>
 </ul>


 <td v-for="command in name.command"> {{ command.name}} </td>
one <td> {{name.command}} </td>
two :
 <ul>
<li v-for="command in name.command"> {{ command.name}}</li>
</ul>
three :
<ul  v-for="command in name.command">
<li> {{ command.name}} </li>
</ul>


four:
<ul>
<li v-for="command in name.command">
<p> Nom de la commande : </p> {{ command.name}}

</li>
</ul>
///////////////////////////////////////////////////////////////
 tableau en dur
 [
   {"id": 1,"name": "Christophe Allios","command": [{"id": 3,"name": "Beta"},{"id": 1,"name": "Alpha100"},{"id": 4,"name": "Delta"}]},
   {"id": 3,"name": "ngbvb frbf b","command": [{"id": 4,"name": "Delta"},{"id": 1,"name": "Alpha100"}]},
   {"id": 2,"name": "bnhmng gbn gbf","command": [{"id": 1,"name": "Alpha100"},{"id": 2,"name": "Ceta"},{"id": 3,"name": "Beta"}]}

   ]


//////////////////// getUsersNameCommandById /////////////////
getUsersNameCommandById(id){
return db.query(`
  SELECT users.id,
  CONCAT(users.lastname,' ', users.firstname) as name,
  json_agg(json_build_object('id', users_command.command_id, 'name', command.name)) as command
  FROM users
  JOIN users_command ON users.id = users_command.user_id
  JOIN command ON command.id = users_command.command_id
  WHERE users.id=${id}
    GROUP BY users.id;
  `)
},


.get('/name/:id', (req,res) => {
  const { id } = req.params;
  model.getUsersNameCommandById(id)
  .then(result => {res.json(result);
    console.log('///////////');
    console.log(result)
  }).catch(err => res.json(err))
  console.log('///////////');
})


this better rather
.get('/name/:id', (req,res) => {
  const { id } = req.params;
  model.getUsersNameCommandById(id)
  .then(result => res.json(result))
  .catch(err => res.json(err))
})


/////////////////////
ranges:[
  {"id":3,"name":"ngbvb frbf b","command":[{"id":1,"name":"Alpha100"},{"id":4,"name":"Delta"}]}
]
/////////////////////


entire methods
getUsersNameCommandById:function(){
  axios.get('http://localhost:3007/users/name/3').then((response) => {
    //console.log('getUsersNameCommandById', response);
    if (response.data.error) {
      app.errorMessage = response.data.message;
      console.log('ERROR getUsersNameCommandById');
    } else {
      console.log('SUCESS SO', response.data.rows);
      this.ranges = response.data.rows;
      console.log('---------- this.ranges is the following ----------');
      console.log(this.ranges);
      console.log('---------- this.ranges is the following[0] ----------');
      console.log(this.ranges[0]);
      console.log('---------- this.ranges is the following[0].command ----------');
      console.log(this.ranges[0].command);
      console.log('---------- this.ranges is the following[0].id ----------');
      console.log(this.ranges[0].id);
      console.log('---------- this.ranges is the following[0].name ----------');
      console.log(this.ranges[0].name);
    }
  })
}



axios.get('http://localhost:3007/users/name/'+ this.ranges[0].id).then((response) => {
axios.get('http://localhost:3007/users/name/'+ sessionStorage.user).then((response) => {




///////////////////////////// dependencies in package.json ///////////////////
"@okta/okta-vue": "^1.0.0",
"axios": "^0.18.0",
"bootstrap-vue": "^2.0.0-rc.11",
"cors": "^2.8.4",
"express": "^4.16.3",
"pg": "^7.4.1",
"vue": "^2.5.2",
"vue-router": "^3.0.1",
"vue2-google-maps": "^0.10.1",
"vuetify": "^1.1.1"

//////////////////////////////////////////////////////////////////////////////
Use this inside of data()
UsersNameCommand: {"id":3,"name":"ngbvb frbf b","command":[{"id":1,"name":"Alpha100"},{"id":4,"name":"Delta"}]},
UsersNameCommand: {"id":3,"name":"ngbvb frbf b","command":[{"id":1,"name":"Alpha100"},{"id":4,"name":"Delta"}]}
what we can put on for sure
<p> This is the list of what we have </p>
<p> {{UsersNameCommand.id}} </p>
<p> {{UsersNameCommand.name}} </p>
<p> {{UsersNameCommand.command}}</p>
<ul class="list">
  <li v-for="rest in UsersNameCommand.command" >
<p> {{rest.name}} </p>
  </li>
</ul>

AND ALSO
<ul class="list">
  <li v-for="rest in UsersNameCommand.command">
  <input type="text" name="" value="" v-model="rest.name">
  </li>
</ul>


<li v-for="rest in UsersNameCommand.command">
<input type="text" name="" value="" v-model="rest.name">
</li>



//////////// google maps trial //////////////
<template>
  <div id="app">
    <input ref="autocomplete"
        placeholder="Search"
        class="search-location"
        onfocus="value = ''"
        type="text" />
  </div>
</template>

<script>
import * as VueGoogleMaps from 'vue2-google-maps'
export default {
  mounted() {
    this.autocomplete.addListener('place_changed', () => {
    let place = this.autocomplete.getPlace();
    let ac = place.address_components;
    let lat = place.geometry.location.lat();
    let lon = place.geometry.location.lng();
    let city = ac[0]["short_name"];

    console.log(`The user picked ${city} with the coordinates ${lat}, ${lon}`);
  });
  }
}
</script>
<style>
*, *::after, *::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  background-color: #dcdde1;
  color: #2f3640;
  padding: 3rem;
}

.search-location {
  display: block;
  width: 60vw;
  margin: 0 auto;
  margin-top: 5vw;
  font-size: 20px;
  font-weight: 400;
  outline: none;
  height: 30px;
  line-height: 30px;
  text-align: center;
  border-radius: 10px;
}
</style>


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ container vuetify \\\\\\\\\\\\\\\\\\\\\\\\\\\\
<v-container grid-list-md text-xs-center>
  <v-layout row wrap>
    <v-flex xs12>
      <v-card dark color="red darken-4">
        <v-card-text class="px-0">12</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 2" :key="`6${i}`" xs6>
      <v-card dark color="orange">
        <v-card-text class="px-0">6</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 3" :key="`4${i}`" xs4>
      <v-card dark color="cyan">
        <v-card-text class="px-0">4</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 4" :key="`3${i}`" xs3>
      <v-card dark color="purple">
        <v-card-text class="px-0">3</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 6" :key="`2${i}`" xs2>
      <v-card dark color="pink">
        <v-card-text class="px-0">2</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 12" :key="`1${i}`" xs1>
      <v-card dark color="green">
        <v-card-text class="px-0">1</v-card-text>
      </v-card>
    </v-flex>
  </v-layout>
</v-container>


///////////////////////////////////////////////////////////////////////////////
<v-container grid-list-md text-xs-center>
  <v-layout row wrap>

    <v-flex v-for="i in 2" :key="`6${i}`" xs6>
      <v-card dark color="orange">
        <v-card-text class="px-0">6</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 3" :key="`4${i}`" xs4>
      <v-card dark color="cyan">
        <v-card-text class="px-0">4</v-card-text>
      </v-card>
    </v-flex>

    <v-flex v-for="i in 6" :key="`2${i}`" xs2>
      <v-card dark color="pink">
        <v-card-text class="px-0">2</v-card-text>
      </v-card>
    </v-flex>

  </v-layout>
</v-container>

///////////////////////////////////////////////
<v-container grid-list-md text-xs-center>
  <v-layout row wrap>

    <v-flex v-for="i in 2" :key="`6${i}`" xs6>
      <v-card dark color="orange">
        <v-card-text class="px-0">6</v-card-text>
      </v-card>
    </v-flex>
    <v-flex v-for="i in 3" :key="`4${i}`" xs4>
      <v-card dark color="cyan">
        <v-card-text class="px-0">4</v-card-text>
      </v-card>
    </v-flex>

    <v-flex v-for="i in 6" :key="`2${i}`" xs2>
      <v-card dark color="pink">
        <v-card-text class="px-0">2</v-card-text>
      </v-card>
    </v-flex>

  </v-layout>
</v-container>

/////////////////////////////// new container //////////////////////////////
<v-container fluid grid-list-md text-xs-center>

  <v-layout row>
    <v-flex xs4 order-md1 >
      <v-card dark tile flat color="red lighten-1">
        <v-card-text>#1</v-card-text>
      </v-card>
    </v-flex>
    <v-flex xs6 order-md2 >
      <v-card dark tile flat color="red lighten-2">
        <v-card-text>#2</v-card-text>
      </v-card>
    </v-flex>
    <v-flex xs2 order-md3>
      <v-card dark tile flat color="red darken-1">
        <v-card-text>#3</v-card-text>
      </v-card>
    </v-flex>
  </v-layout>
<hr>
<v-layout row>
<v-flex xs4 order-md1 >
<v-card dark tile flat color="red lighten-1">
  <v-card-text>#1</v-card-text>
</v-card>
</v-flex>
<v-flex xs6 order-md2 >
<v-card dark tile flat color="red lighten-2">
  <v-card-text>#2</v-card-text>
</v-card>
</v-flex>
<v-flex xs2 order-md3>
<v-card dark tile flat color="red darken-1">
  <v-card-text>#3</v-card-text>
</v-card>
</v-flex>
</v-layout>
<hr>
<v-layout row>
<v-flex xs4 order-md1 >
<v-card dark tile flat color="red lighten-1">
  <v-card-text>#1</v-card-text>
</v-card>
</v-flex>
<v-flex xs6 order-md2 >
<v-card dark tile flat color="red lighten-2">
  <v-card-text>#2</v-card-text>
</v-card>
</v-flex>
<v-flex xs2 order-md3>
<v-card dark tile flat color="red darken-1">
  <v-card-text>#3</v-card-text>
</v-card>
</v-flex>
</v-layout>
<hr>
<v-layout row>
<v-flex xs4 order-md1 >
<v-card dark tile flat color="red lighten-1">
  <v-card-text>#1</v-card-text>
</v-card>
</v-flex>
<v-flex xs6 order-md2 >
<v-card dark tile flat color="red lighten-2">
  <v-card-text>#2</v-card-text>
</v-card>
</v-flex>
<v-flex xs2 order-md3>
<v-card dark tile flat color="red darken-1">
  <v-card-text>#3</v-card-text>
</v-card>
</v-flex>
</v-layout>
</v-container>


avatar https://vuetifyjs.com/en/components/lists#example-avatar-three-lines

///////////////////////////////CREATION OF TABLE ITEMS ///////////////////////
CREATE TABLE items
(
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
type VARCHAR(255),
title VARCHAR(255),
activity VARCHAR(255),
price integer,
dispo boolean
);


INSERT INTO items
(name, type, title, activity, price, dispo)
VALUES
('Alphonse', 'Wolkswagen', 'lund 04 oct 2017 @ 8h', 'Faire le plein', 35, '0'),
('Bernard', 'Lexus', 'lund 04 oct 2017 @ 12h', 'Faire le 1/2', 35, '1'),
('Celine', 'Mercedes', 'mer 06 oct 2017 @ 10h', 'Faire le 1/4', 15, '1'),
('Daniel', 'Wolkswagen', 'jeu 07 oct 2017 @ 11h', 'Faire le 1/2', 35, '0'),
('Etienne', 'Wolkswagen', 'dim 10 oct 2017 @ 14h', 'Faire le plein', 55, '0');
